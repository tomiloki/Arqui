// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique @db.VarChar(50)
  usuarios  Usuario[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Usuario {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(50)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  rolId     Int
  rol       Rol       @relation(fields: [rolId], references: [id], onDelete: Cascade)
  pedidos   Pedido[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique @db.VarChar(100)
  productos Producto[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Producto {
  id          Int               @id @default(autoincrement())
  nombre      String            @db.VarChar(100)
  descripcion String?           @db.Text
  precio      Decimal           @default(0.00) @db.Decimal(10, 2)
  stock       Int               @default(0)
  categoriaId Int
  categoria   Categoria         @relation(fields: [categoriaId], references: [id], onDelete: Restrict)
  pedidos     PedidoProducto[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EstadoPedido {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique @db.VarChar(50) // Ej: "PENDIENTE"
  pedidos   Pedido[]
  @@index([nombre])
}

model Pedido {
  id          Int               @id @default(autoincrement())
  fecha       DateTime          @default(now())
  usuarioId   Int
  usuario     Usuario           @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  estadoId    Int               @default(1) // Estado inicial: PENDIENTE
  estado      EstadoPedido      @relation(fields: [estadoId], references: [id], onDelete: Restrict)
  productos   PedidoProducto[]
  transaccion Transaccion?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model PedidoProducto {
  pedidoId   Int
  productoId Int
  cantidad   Int               @default(1)
  pedido     Pedido            @relation(fields: [pedidoId], references: [id])
  producto   Producto          @relation(fields: [productoId], references: [id])
  @@id([pedidoId, productoId])
}

model Transaccion {
  id         Int       @id @default(autoincrement())
  monto      Decimal   @default(0.00) @db.Decimal(10, 2)
  fecha      DateTime  @default(now())
  pedidoId   Int       @unique
  pedido     Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
